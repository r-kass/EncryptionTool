private static Cipher cipher;
    private static IvParameterSpec iv;
    private static SecretKeySpec key;
    private static byte[] ivBytes;
    private static byte[] salt;

    private static byte[] hsalt = "ThisIsAHardcodedSaltBecauseIDontKnowWhereToSaveIt".getBytes();

    MyEncryptionTool() throws Exception {
    }

    public static byte[] deriveKey(String p, byte[] s, int i, int l) throws Exception {
        PBEKeySpec ks = new PBEKeySpec(p.toCharArray(), s, i, l);
        SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        return skf.generateSecret(ks).getEncoded();
    }

    public static void encrypt(String valueToEnc, String p) throws Exception {
        // There are many different ways to do this, but 
        // Java has a PBKDF2 implementation for deriving 
        // a key from a password. Below is one of them:
        String thePassphrase = "password";        // The password to derive from
        SecureRandom random = new SecureRandom(); // SecureRandom > Random ANY DAY
        salt = new byte[32];    // 32 byts of salt
        random.nextBytes(salt); // The salt is generated from a cryptographically random source
        int iterations = 10000; // The iteration count
        int keyStrength = 256;  // Key length
 // Now for AES-256..
        // Derive the key using the things above
        KeySpec spec = new PBEKeySpec(thePassphrase.toCharArray(), salt, iterations, keyStrength);
        SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
        byte[] keyBytes = f.generateSecret(spec).getEncoded();

        // AES only supports key sizes of 16, 24 or 32 bytes. We are "trimming" 
        // the size so it matches with the amount gotten from the key above.
        keyBytes = Arrays.copyOf(keyBytes, 16);
        key = new SecretKeySpec(keyBytes, 0, keyBytes.length, "AES");

        // Generate a random initialization vector (IV) from a cryptographically random source
        // and size will be equal to the block size of AES-256 encryption.
        ivBytes = new byte[16];
        random.nextBytes(ivBytes);
        iv = new IvParameterSpec(ivBytes);

        //
        cipher = Cipher.getInstance("AES/CTR/NoPadding");
        cipher.init(Cipher.ENCRYPT_MODE, key, iv);
        byte[] encValue = cipher.doFinal(valueToEnc.getBytes());
        SecureRandom r = SecureRandom.getInstance("SHA1PRNG");

        // Generate 160 bit Salt for HMAC Key
        //HERE byte[] hsalt = new byte[20]; 
        //HERE r.nextBytes(hsalt);
        // Generate 160 bit HMAC Key
        byte[] dhk = deriveKey(p, hsalt, 100000, 160);

        // Perform HMAC using SHA-256
        SecretKeySpec hks = new SecretKeySpec(dhk, "HmacSHA256");
        Mac m = Mac.getInstance("HmacSHA256");
        m.init(hks);
        byte[] hmac = m.doFinal(encValue);
 	byte[] os = new byte[40 + encValue.length + 32];

        PrintWriter writer = new PrintWriter(new FileOutputStream("encryptedFile.txt"), true);
        writer.println(new sun.misc.BASE64Encoder().encodeBuffer(salt).trim());
        writer.println(new sun.misc.BASE64Encoder().encodeBuffer(hmac).trim());
        writer.println(new sun.misc.BASE64Encoder().encodeBuffer(ivBytes).trim());
        writer.println(new sun.misc.BASE64Encoder().encodeBuffer(encValue).trim());
        writer.close();
    }



public String decrypt(String p) throws Exception {
        File file = new File("encryptedFile.txt");
        FileReader fileReader = new FileReader(file);
        BufferedReader read = new BufferedReader(fileReader);
        String theSalt = read.readLine();
        //System.out.println(theSalt);
        String theHMAC = read.readLine();
        //System.out.println(theHMAC);
        String theIV = read.readLine();
        //System.out.println(theIV);
        String theEncrypted = read.readLine();
        //System.out.println(theEncrypted);

        fileReader.close();
	
	regenerate everything again (iv, key. hmac), like we did in encrypt

// Regenerate HMAC key using Recovered Salt (hsalt)
        byte[] dhk = deriveKey(p, hsalt, 100000, 160);
        // Perform HMAC using SHA-256
        SecretKeySpec hks = new SecretKeySpec(dhk, "HmacSHA256");
        Mac m = Mac.getInstance("HmacSHA256");
        m.init(hks);
        byte[] chmac = m.doFinal(os);

        // Compare Computed HMAC vs Recovered HMAC
        if (MessageDigest.isEqual(hmac, chmac)) {
            // HMAC Verification Passed
            // Regenerate Encryption Key using Recovered Salt (esalt)
            byte[] dek = deriveKey(p, salt, 100000, 128);

            // Perform Decryption
            //SecretKeySpec eks = new SecretKeySpec(dek, "AES");
            Cipher c = Cipher.getInstance("AES/CTR/NoPadding");
            c.init(Cipher.DECRYPT_MODE, key, iv);
            byte[] s = c.doFinal(os);

            String hmac64 = new sun.misc.BASE64Encoder().encodeBuffer(hmac);
            // Return our Decrypted String
            return new String(s);
            //}
        }else{
            return null;
        }
    }
